// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/cache/user.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/cache/user.go -package=cachemocks -destination=./internal/repository/cache/mocks/user.mock.go
//

// Package cachemocks is a generated GoMock package.
package cachemocks

import (
	context "context"
	domain "red-feed/internal/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRedisUserCache is a mock of RedisUserCache interface.
type MockRedisUserCache struct {
	ctrl     *gomock.Controller
	recorder *MockRedisUserCacheMockRecorder
	isgomock struct{}
}

// MockRedisUserCacheMockRecorder is the mock recorder for MockRedisUserCache.
type MockRedisUserCacheMockRecorder struct {
	mock *MockRedisUserCache
}

// NewMockRedisUserCache creates a new mock instance.
func NewMockRedisUserCache(ctrl *gomock.Controller) *MockRedisUserCache {
	mock := &MockRedisUserCache{ctrl: ctrl}
	mock.recorder = &MockRedisUserCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisUserCache) EXPECT() *MockRedisUserCacheMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockRedisUserCache) Get(ctx context.Context, id int64) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRedisUserCacheMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRedisUserCache)(nil).Get), ctx, id)
}

// Key mocks base method.
func (m *MockRedisUserCache) Key(id int64) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key", id)
	ret0, _ := ret[0].(string)
	return ret0
}

// Key indicates an expected call of Key.
func (mr *MockRedisUserCacheMockRecorder) Key(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockRedisUserCache)(nil).Key), id)
}

// Set mocks base method.
func (m *MockRedisUserCache) Set(ctx context.Context, u domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockRedisUserCacheMockRecorder) Set(ctx, u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRedisUserCache)(nil).Set), ctx, u)
}
