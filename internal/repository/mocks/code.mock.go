// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/code.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/code.go -package=repomocks -destination=./internal/repository/mocks/code.mock.go
//

// Package repomocks is a generated GoMock package.
package repomocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCachedCodeRepository is a mock of CachedCodeRepository interface.
type MockCachedCodeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCachedCodeRepositoryMockRecorder
	isgomock struct{}
}

// MockCachedCodeRepositoryMockRecorder is the mock recorder for MockCachedCodeRepository.
type MockCachedCodeRepositoryMockRecorder struct {
	mock *MockCachedCodeRepository
}

// NewMockCachedCodeRepository creates a new mock instance.
func NewMockCachedCodeRepository(ctrl *gomock.Controller) *MockCachedCodeRepository {
	mock := &MockCachedCodeRepository{ctrl: ctrl}
	mock.recorder = &MockCachedCodeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCachedCodeRepository) EXPECT() *MockCachedCodeRepositoryMockRecorder {
	return m.recorder
}

// Store mocks base method.
func (m *MockCachedCodeRepository) Store(ctx context.Context, biz, phone, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, biz, phone, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockCachedCodeRepositoryMockRecorder) Store(ctx, biz, phone, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockCachedCodeRepository)(nil).Store), ctx, biz, phone, code)
}

// Verify mocks base method.
func (m *MockCachedCodeRepository) Verify(ctx context.Context, biz, phone, code string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", ctx, biz, phone, code)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockCachedCodeRepositoryMockRecorder) Verify(ctx, biz, phone, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockCachedCodeRepository)(nil).Verify), ctx, biz, phone, code)
}
